# generated by datamodel-codegen:
#   filename:  event-feed-array.json
#   timestamp: 2025-09-18T09:03:37+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional, Union

from pydantic import BaseModel, Field, confloat, conint, constr


class Endpointssingularcontest(Enum):
    contest = "contest"
    judgement_types = "judgement-types"
    languages = "languages"
    problems = "problems"
    groups = "groups"
    organizations = "organizations"
    persons = "persons"
    accounts = "accounts"
    teams = "teams"
    state = "state"
    submissions = "submissions"
    judgements = "judgements"
    runs = "runs"
    clarifications = "clarifications"
    awards = "awards"
    commentary = "commentary"
    scoreboard = "scoreboard"
    event_feed = "event-feed"


class Identifier(BaseModel):
    __root__: constr(regex=r"^[A-Za-z0-9_]([A-Za-z0-9_\.-]{0,34}[A-Za-z0-9_-]|)")


class ScoreboardType(Enum):
    pass_fail = "pass-fail"
    score = "score"


class Abstime(BaseModel):
    __root__: constr(
        regex=r"^[12][0-9]{3}-[01][0-9]-[0-3][0-9]T[0-2][0-9]:[0-6][0-9]:[0-6][0-9](\.[0-9]{3})?([+-][0-1][0-9](:[0-5][0-9])?|Z)$"
    )


class Posreltime(BaseModel):
    __root__: constr(regex=r"^([1-9][0-9]*)?[0-9]:[0-5][0-9]:[0-5][0-9](\.[0-9]{3})?$")


class Mime(Enum):
    image_png = "image/png"
    image_jpeg = "image/jpeg"
    image_svg_xml = "image/svg+xml"


class Fileref(BaseModel):
    href: str
    filename: Optional[str] = None
    hash: Optional[str] = None
    mime: str
    width: Optional[conint(ge=1)] = None
    height: Optional[conint(ge=1)] = None


class Location(BaseModel):
    latitude: confloat(ge=-90.0, le=90.0)
    longitude: confloat(ge=-180.0, le=180.0)


class Judgementtypeid(Enum):
    AC = "AC"
    RE = "RE"
    WA = "WA"
    TLE = "TLE"
    RTE = "RTE"
    CE = "CE"
    APE = "APE"
    OLE = "OLE"
    PE = "PE"
    EO = "EO"
    IO = "IO"
    NO = "NO"
    WTL = "WTL"
    ILE = "ILE"
    TCO = "TCO"
    TWA = "TWA"
    TPE = "TPE"
    TEO = "TEO"
    TIO = "TIO"
    TNO = "TNO"
    MLE = "MLE"
    SV = "SV"
    IF = "IF"
    RCO = "RCO"
    RWA = "RWA"
    RPE = "RPE"
    REO = "REO"
    RIO = "RIO"
    RNO = "RNO"
    CTL = "CTL"
    JE = "JE"
    SE = "SE"
    CS = "CS"


class Command(BaseModel):
    command: str
    args: Optional[str] = None
    version: Optional[str] = None
    version_command: Optional[str] = None


class Filerefsornull(BaseModel):
    __root__: Optional[List[Fileref]]


class Location1(BaseModel):
    x: float
    y: float
    rotation: confloat(ge=0.0, le=360.0)


class Identifiers(BaseModel):
    __root__: List[Identifier] = Field(..., unique_items=True)


class Sex(Enum):
    male = "male"
    female = "female"


class Role(Enum):
    contestant = "contestant"
    coach = "coach"
    staff = "staff"
    other = "other"


class Type(Enum):
    team = "team"
    judge = "judge"
    admin = "admin"
    analyst = "analyst"
    staff = "staff"


class Reltime(BaseModel):
    __root__: constr(regex=r"^-?([1-9][0-9]*)?[0-9]:[0-5][0-9]:[0-5][0-9](\.[0-9]{3})?$")


class Filerefs(BaseModel):
    __root__: List[Fileref] = Field(..., unique_items=True)


class Judgementtypeidornull(BaseModel):
    __root__: Optional[Judgementtypeid]


class Reltimeornull(BaseModel):
    __root__: Optional[Reltime]


class Run(BaseModel):
    id: Identifier
    judgement_id: Identifier
    ordinal: int
    judgement_type_id: Judgementtypeid
    time: Abstime
    contest_time: Reltime
    run_time: Optional[confloat(ge=0.0, multiple_of=0.001)] = None


class Runs(BaseModel):
    __root__: List[Run] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: runs",
        unique_items=True,
    )


class Identifierornull(BaseModel):
    __root__: Optional[Identifier]


class Abstimeornull(BaseModel):
    __root__: Optional[Abstime]


class Posreltimeornull(BaseModel):
    __root__: Optional[Posreltime]


class Imageref(Fileref):
    mime: Optional[Mime] = None


class Locationornull(BaseModel):
    __root__: Optional[Location]


class JudgementType(BaseModel):
    id: Judgementtypeid
    name: str
    penalty: Optional[bool] = None
    solved: bool


class JudgementTypes(BaseModel):
    __root__: List[JudgementType] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: judgement_types",
        unique_items=True,
    )


class Commandornull(BaseModel):
    __root__: Optional[Command]


class Problem(BaseModel):
    id: Identifier
    uuid: Optional[constr(regex=r"^[A-Fa-f0-9]{8}-([A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}$")] = None
    label: str
    name: str
    ordinal: int
    rgb: Optional[constr(regex=r"^#[A-Fa-f0-9]{3}([A-Fa-f0-9]{3})?$")] = None
    color: Optional[str] = None
    time_limit: Optional[confloat(ge=0.0, multiple_of=0.001)] = None
    test_data_count: conint(ge=0)
    max_score: Optional[float] = None
    package: Optional[Filerefsornull] = None
    statement: Optional[Filerefsornull] = None


class Problems(BaseModel):
    __root__: List[Problem] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: problems",
        unique_items=True,
    )


class Group(BaseModel):
    id: Identifier
    icpc_id: Optional[str] = None
    name: str
    type: Optional[str] = None
    location: Optional[Locationornull] = None


class Groups(BaseModel):
    __root__: List[Group] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: groups",
        unique_items=True,
    )


class Identifiersornull(BaseModel):
    __root__: Optional[Identifiers]


class Account(BaseModel):
    id: Identifier
    username: str
    password: Optional[str] = None
    name: Optional[str] = None
    type: Optional[Type]
    ip: Optional[str] = None
    team_id: Optional[Identifierornull] = None
    person_id: Optional[Identifierornull] = None


class Accounts(BaseModel):
    __root__: List[Account] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: accounts",
        unique_items=True,
    )


class State(BaseModel):
    started: Abstimeornull
    frozen: Optional[Abstimeornull] = None
    ended: Abstimeornull
    thawed: Optional[Abstimeornull] = None
    finalized: Abstimeornull
    end_of_updates: Abstimeornull


class Submission1(BaseModel):
    id: Identifier
    language_id: Identifier
    problem_id: Identifier
    team_id: Identifier
    time: Abstime
    contest_time: Reltime
    entry_point: Optional[str]
    files: Filerefs
    reaction: Optional[Filerefsornull] = None


class Submission2(BaseModel):
    id: Identifier
    language_id: Identifier
    problem_id: Identifier
    team_id: Identifier
    time: Abstime
    contest_time: Reltime
    entry_point: Optional[str] = None
    files: Filerefs
    reaction: Optional[Filerefsornull] = None


class Submission3(BaseModel):
    id: Identifier
    language_id: Identifier
    problem_id: Identifier
    team_id: Identifier
    time: Abstime
    contest_time: Reltime
    entry_point: None = None
    files: Filerefs
    reaction: Optional[Filerefsornull] = None


class Submission4(BaseModel):
    id: Identifier
    language_id: Identifier
    problem_id: Identifier
    team_id: Identifier
    time: Abstime
    contest_time: Reltime
    entry_point: Optional[str] = None
    files: Filerefs
    reaction: Optional[Filerefsornull] = None


class Submission(BaseModel):
    __root__: Union[Submission1, Union[Submission2, Submission3], Submission4] = Field(
        ...,
        description="Definition of a single submission object",
        title="CLICS Contest API - submission",
    )


class Submissions(BaseModel):
    __root__: List[Submission] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: submissions",
        unique_items=True,
    )


class Judgement1(BaseModel):
    id: Identifier
    submission_id: Identifier
    judgement_type_id: Judgementtypeidornull
    score: Optional[confloat(ge=0.0)] = None
    start_time: Abstime
    start_contest_time: Reltime
    end_time: Abstimeornull
    end_contest_time: Reltimeornull
    max_run_time: Optional[confloat(ge=0.0, multiple_of=0.001)] = None


class Judgement2(BaseModel):
    id: Identifier
    submission_id: Identifier
    judgement_type_id: Optional[Judgementtypeidornull] = None
    score: Optional[confloat(ge=0.0)] = None
    start_time: Abstime
    start_contest_time: Reltime
    end_time: Optional[Abstimeornull] = None
    end_contest_time: Optional[Reltimeornull] = None
    max_run_time: Optional[confloat(ge=0.0, multiple_of=0.001)] = None


class Judgement(BaseModel):
    __root__: Union[Judgement1, Judgement2] = Field(
        ...,
        description="Definition of a single judgement object",
        title="CLICS Contest API - judgement",
    )


class Judgements(BaseModel):
    __root__: List[Judgement] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: judgements",
        unique_items=True,
    )


class Clarification(BaseModel):
    id: Identifier
    from_team_id: Optional[Identifierornull] = None
    to_team_id: Optional[Identifierornull] = None
    reply_to_id: Optional[Identifierornull] = None
    problem_id: Optional[Identifierornull] = None
    text: str
    time: Abstime
    contest_time: Reltime


class Clarifications(BaseModel):
    __root__: List[Clarification] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: clarifications",
        unique_items=True,
    )


class Award(BaseModel):
    id: Identifier
    citation: str
    team_ids: Optional[Identifiersornull] = None


class Awards(BaseModel):
    __root__: List[Award] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: awards",
        unique_items=True,
    )


class Commentary(BaseModel):
    id: Identifier
    time: Abstime
    contest_time: Reltime
    message: str
    tags: List[str] = Field(..., unique_items=True)
    source_id: Optional[Identifierornull] = None
    team_ids: Optional[Identifiersornull] = None
    problem_ids: Optional[Identifiersornull] = None
    submission_ids: Optional[Identifiersornull] = None


class Commentaries(BaseModel):
    __root__: List[Commentary] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: commentary",
        unique_items=True,
    )


class Imagerefsornull(BaseModel):
    __root__: Optional[List[Imageref]]


class Language(BaseModel):
    id: Identifier
    name: str
    entry_point_required: bool
    entry_point_name: Optional[str] = None
    extensions: List[str] = Field(..., unique_items=True)
    compiler: Optional[Commandornull] = None
    runner: Optional[Commandornull] = None


class Languages(BaseModel):
    __root__: List[Language] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: languages",
        unique_items=True,
    )


class Organization(BaseModel):
    id: Identifier
    icpc_id: Optional[str] = None
    name: str
    formal_name: Optional[str] = None
    country: Optional[constr(regex=r"^[A-Z]{3}$")] = None
    country_flag: Optional[Imagerefsornull] = None
    url: Optional[str] = None
    twitter_hashtag: Optional[str] = None
    twitter_account: Optional[str] = None
    location: Optional[Locationornull] = None
    logo: Optional[Imagerefsornull] = None


class Organizations(BaseModel):
    __root__: List[Organization] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: organizations",
        unique_items=True,
    )


class Team(BaseModel):
    id: Identifier
    icpc_id: Optional[str] = None
    name: str
    label: str
    display_name: Optional[str] = None
    organization_id: Optional[Identifierornull] = None
    group_ids: Optional[Identifiersornull] = None
    hidden: Optional[bool] = None
    location: Optional[Location1] = None
    photo: Optional[Imagerefsornull] = None
    video: Optional[Filerefsornull] = None
    backup: Optional[Filerefsornull] = None
    key_log: Optional[Filerefsornull] = None
    tool_data: Optional[Filerefsornull] = None
    desktop: Optional[Filerefsornull] = None
    webcam: Optional[Filerefsornull] = None
    audio: Optional[Filerefsornull] = None


class Teams(BaseModel):
    __root__: List[Team] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: teams",
        unique_items=True,
    )


class Person(BaseModel):
    id: Identifier
    icpc_id: Optional[str] = None
    team_ids: Optional[Identifiers] = None
    name: str
    title: Optional[str] = None
    email: Optional[str] = None
    sex: Optional[Sex] = None
    role: Role
    photo: Optional[Imagerefsornull] = None


class Persons(BaseModel):
    __root__: List[Person] = Field(
        ...,
        description="JSON response of this API call",
        title="CLICS Contest API: persons",
        unique_items=True,
    )


class Contest(BaseModel):
    id: Identifier
    name: str
    formal_name: Optional[str] = None
    start_time: Optional[Abstimeornull] = None
    countdown_pause_time: Optional[Posreltimeornull] = None
    duration: Posreltime
    scoreboard_freeze_duration: Optional[Posreltimeornull] = None
    scoreboard_type: ScoreboardType
    penalty_time: Optional[conint(ge=0)] = None
    banner: Optional[Imagerefsornull] = None
    logo: Optional[Imagerefsornull] = None
    location: Optional[Locationornull] = None


class EventFeed(BaseModel):
    type: Endpointssingularcontest
    id: Identifierornull
    data: Optional[
        Union[
            Contest,
            JudgementType,
            JudgementTypes,
            Language,
            Languages,
            Problem,
            Problems,
            Group,
            Groups,
            Organization,
            Organizations,
            Team,
            Teams,
            Person,
            Persons,
            Account,
            Accounts,
            State,
            Submission,
            Submissions,
            Judgement,
            Judgements,
            Run,
            Runs,
            Clarification,
            Clarifications,
            Award,
            Awards,
            Commentary,
            Commentaries,
        ]
    ]
    token: Optional[str] = None


class ClicsContestApiEventFeedArray(BaseModel):
    __root__: List[EventFeed] = Field(
        ...,
        description="JSON array of responses of this NDJSON API call",
        title="CLICS Contest API: event-feed array",
    )
